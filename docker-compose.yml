services:
  # MinIO - S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    command: server /data --console-address ":9001"
    volumes:
      - ./volumes/minio-data:/data
    networks:
      - spark-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MinIO Client - Create buckets on startup
  minio-setup:
    image: minio/mc:latest
    container_name: minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...';
      sleep 5;
      /usr/bin/mc alias set myminio http://minio:9000 admin admin123;
      /usr/bin/mc mb myminio/warehouse --ignore-existing;
      /usr/bin/mc mb myminio/data --ignore-existing;
      /usr/bin/mc anonymous set public myminio/warehouse;
      /usr/bin/mc anonymous set public myminio/data;
      echo 'MinIO buckets created successfully';
      exit 0;
      "
    networks:
      - spark-network

  # PostgreSQL - Hive Metastore database
  postgres:
    image: postgres:14
    container_name: hive-metastore-db
    environment:
      POSTGRES_DB: metastore
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hive123
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/postgres-data:/var/lib/postgresql/data
    networks:
      - spark-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hive -d metastore"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Hive Metastore
  hive-metastore:
    platform: linux/amd64
    build:
      context: ./docker/hive
      dockerfile: Dockerfile
    container_name: hive-metastore
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      SERVICE_NAME: metastore
      DB_DRIVER: postgres
      SKIP_SCHEMA_INIT: "true"
      SERVICE_OPTS: >-
        -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver
        -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://postgres:5432/metastore
        -Djavax.jdo.option.ConnectionUserName=hive
        -Djavax.jdo.option.ConnectionPassword=hive123
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: admin123
      AWS_REGION: us-east-1
    ports:
      - "9083:9083"
    volumes:
      - ./conf/hive/metastore-site.xml:/opt/hive/conf/metastore-site.xml
      - ./conf/hive/core-site.xml:/opt/hive/conf/core-site.xml
    networks:
      - spark-network
    healthcheck:
      test: ["CMD", "bash", "-c", "timeout 1 bash -c 'cat < /dev/null > /dev/tcp/localhost/9083'"]
      interval: 10s
      timeout: 5s
      retries: 10
    entrypoint: ["/bin/bash"]
    command: >
      -c "
      export HIVE_CONF_DIR=/opt/hive/conf;
      export HADOOP_CLIENT_OPTS=\"-Xmx1G -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://postgres:5432/metastore -Djavax.jdo.option.ConnectionUserName=hive -Djavax.jdo.option.ConnectionPassword=hive123\";
      echo 'Waiting 5 seconds for PostgreSQL...';
      sleep 5;
      echo 'Starting Hive Metastore...';
      /opt/hive/bin/hive --service metastore
      "

  # Spark Master with custom image including all dependencies
  spark-master:
    build:
      context: ./docker/spark
      dockerfile: Dockerfile
    container_name: spark-master
    hostname: spark-master
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
    depends_on:
      hive-metastore:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      - SPARK_NO_DAEMONIZE=true
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=admin123
      - AWS_REGION=us-east-1
      - PYSPARK_PYTHON=/usr/bin/python3
      - PYSPARK_DRIVER_PYTHON=/usr/bin/python3
    ports:
      - "8080:8080"
      - "7077:7077"
      - "4040:4040"
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./conf/spark/hive-site.xml:/opt/spark/conf/hive-site.xml
      - ./conf/spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
    networks:
      - spark-network

  # Spark Worker
  spark-worker:
    build:
      context: ./docker/spark
      dockerfile: Dockerfile
    container_name: spark-worker
    hostname: spark-worker
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      - SPARK_NO_DAEMONIZE=true
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_PORT=8881
      - SPARK_WORKER_WEBUI_PORT=8081
      - SPARK_MASTER=spark://spark-master:7077
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=admin123
      - AWS_REGION=us-east-1
      - PYSPARK_PYTHON=/usr/bin/python3
      - PYSPARK_DRIVER_PYTHON=/usr/bin/python3
    ports:
      - "8081:8081"
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./conf/spark/hive-site.xml:/opt/spark/conf/hive-site.xml
      - ./conf/spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
    networks:
      - spark-network

  # Jupyter Notebook with PySpark
  jupyter:
    build:
      context: ./docker/jupyter
      dockerfile: Dockerfile
    container_name: jupyter-pyspark
    depends_on:
      - spark-master
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - SPARK_MASTER=spark://spark-master:7077
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=admin123
      - AWS_REGION=us-east-1
      - JUPYTER_TOKEN=
      - JUPYTER_PASSWORD=
      - PYSPARK_PYTHON=/usr/bin/python3
      - PYSPARK_DRIVER_PYTHON=/usr/bin/python3
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./spark-apps:/home/jovyan/spark-apps:ro
      - ./conf/spark/hive-site.xml:/usr/local/spark/conf/hive-site.xml:ro
    networks:
      - spark-network

networks:
  spark-network:
    driver: bridge
